"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./context/Voters.js":
/*!***************************!*\
  !*** ./context/Voters.js ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"VotingContext\": function() { return /* binding */ VotingContext; },\n/* harmony export */   \"VotingProvider\": function() { return /* binding */ VotingProvider; },\n/* harmony export */   \"fetchContract\": function() { return /* binding */ fetchContract; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var web3modal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! web3modal */ \"./node_modules/web3modal/dist/index.js\");\n/* harmony import */ var web3modal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(web3modal__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/router */ \"./node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants */ \"./context/constants.js\");\n/* harmony import */ var _pinata__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./pinata */ \"./context/pinata.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils */ \"./context/utils.js\");\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n// import cv from \"@techstark/opencv-js\";\n// Define a function to load and process an image\n// function loadImageAndProcess(fileURL) {\n// Load the image from the fileURL and convert to grayscale\n// console.log(fileURL);\n// let img = cv.imread(fileURL);\n// cv.imread(fileURL);\n// let gray_img = new cv.Mat();\n// cv.cvtColor(img, gray_img, cv.COLOR_BGR2GRAY);\n// // Create a SIFT object and detect keypoints and descriptors\n// let sift = new cv.SIFT();\n// let kp_img = new cv.KeyPointVector();\n// let des_img = new cv.Mat();\n// sift.detectAndCompute(gray_img, new cv.Mat(), kp_img, des_img);\n// // Return the image, keypoints, and descriptors\n// return [img, kp_img, des_img];\n// }\n// Define a function to verify the face using SIFT features\n// function verifyFace(fileURL, threshold) {\n// Load and process the image from the fileURL\n// let cap = new cv.VideoCapture(0);\n// loadImageAndProcess(fileURL);\n// let [img, kp_img, des_img] = loadImageAndProcess(fileURL);\n// console.log(img);\n// // Open the camera and capture a frame\n// let cap = new cv.VideoCapture(0);\n// let frame = new cv.Mat();\n// cap.read(frame);\n// // Convert the frame to grayscale and detect keypoints and descriptors\n// let gray_frame = new cv.Mat();\n// cv.cvtColor(frame, gray_frame, cv.COLOR_BGR2GRAY);\n// let kp_frame = new cv.KeyPointVector();\n// let des_frame = new cv.Mat();\n// sift.detectAndCompute(gray_frame, new cv.Mat(), kp_frame, des_frame);\n// // Match the descriptors using Brute Force Matcher and sort by distance\n// let bf = new cv.BFMatcher(cv.NORM_L1, true);\n// let matches = new cv.DMatchVector();\n// bf.match(des_img, des_frame, matches);\n// matches.sort((a, b) => a.distance - b.distance);\n// // Draw the matched keypoints and display the result\n// let matching_result = new cv.Mat();\n// cv.drawMatches(img, kp_img, frame, kp_frame, matches, matching_result);\n// cv.imshow(\"Matching Result\", matching_result);\n// // Calculate the ratio of matches to keypoints and compare with threshold\n// let ratio = matches.size() / kp_img.size();\n// if (ratio >= threshold) {\n//   console.log(\"Face verified\");\n// } else {\n//   console.log(\"Face not verified\");\n// }\n// // Release the camera and close the windows\n// cap.release();\n// cv.destroyAllWindows();\n// }\n// verifyFace(\"https://ipfs.io/ipfs/QmQCutTj8gCnHfQ64mBcRu1b2DAuxgKXYoUrgwmJPhXkvB\", 0.7);\nconst fetchContract = (signerOrProvider)=>new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(_constants__WEBPACK_IMPORTED_MODULE_4__.VotingAddress, _constants__WEBPACK_IMPORTED_MODULE_4__.VotingAddressABI, signerOrProvider);\nconst VotingContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createContext();\nconst VotingProvider = (param)=>{\n    let { children  } = param;\n    _s();\n    const votingTitle = \"Voting contract\";\n    const router = (0,next_router__WEBPACK_IMPORTED_MODULE_3__.useRouter)();\n    let vlen = 0;\n    let clen = 0;\n    const [currentAccount, setCurrentAccount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [candidateLength, setCandidateLength] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(clen);\n    const pushCandidate = [];\n    const candidateIndex = [];\n    const [candidateArray, setCandidateArray] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(pushCandidate);\n    const [error, SetError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const highestVote = [];\n    const pushVoters = [];\n    const [voterArray, setVoterArray] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(pushVoters);\n    const [voterLength, setVoterLength] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(vlen);\n    const [voterAddress, setVoterAddress] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [fileURL, setFileURL] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // connecting wallet\n    const checkIfWalletIsConnected = async ()=>{\n        if (!window.ethereum) return SetError(\"please install metamask\");\n        const account = await window.ethereum.request({\n            method: \"eth_accounts\"\n        });\n        if (account.length) {\n            setCurrentAccount(account[0]);\n        } else {\n            SetError(\"please install metamask & Reload\");\n        }\n    };\n    // connect wallet\n    const connectWallet = async ()=>{\n        if (!window.ethereum) return SetError(\"please install metamask\");\n        const account = await window.ethereum.request({\n            method: \"eth_requestAccounts\"\n        });\n        setCurrentAccount(account[0]);\n    };\n    //create voters\n    const createVoter = async (formInput, fileURL, router)=>{\n        try {\n            const { name , address , position , pin  } = formInput;\n            if (!name || !address || !position || !pin) {\n                SetError(\"Input data is missing\");\n            }\n            //connecting smart contract\n            const web3modal = new (web3modal__WEBPACK_IMPORTED_MODULE_2___default())();\n            const connection = await web3modal.connect();\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.providers.Web3Provider(connection);\n            const signer = provider.getSigner();\n            const contract = fetchContract(signer);\n            const data = {\n                name,\n                address,\n                position,\n                image: fileURL\n            };\n            const pinataUrl = await (0,_pinata__WEBPACK_IMPORTED_MODULE_5__.uploadJSONToIPFS)(data);\n            const ipfsUrl = (0,_utils__WEBPACK_IMPORTED_MODULE_6__.GetIpfsUrlFromPinata)(pinataUrl.pinataURL);\n            const voter = await contract.voterRight(address, name, fileURL, ipfsUrl);\n            await voter.wait();\n            let result = await fetch(\"http://localhost:3001/add-pin\", {\n                method: \"POST\",\n                body: JSON.stringify({\n                    address,\n                    pin\n                }),\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            result = result.json();\n            console(result);\n            if (result) {\n                router.push(\"/voterList\");\n            }\n            console.log(voter);\n            router.push(\"/voterList\");\n        } catch (error) {\n            SetError(\"Error in creating the voter\");\n        }\n    };\n    const getAllVoterData = async ()=>{\n        try {\n            const web3modal = new (web3modal__WEBPACK_IMPORTED_MODULE_2___default())();\n            const connection = await web3modal.connect();\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.providers.Web3Provider(connection);\n            const signer = provider.getSigner();\n            const contract = fetchContract(signer);\n            const voterListData = await contract.getVoterList();\n            setVoterAddress(voterListData);\n            voterListData.map(async (el)=>{\n                const singleVoterData = await contract.getVoterData(el);\n                pushVoters.push(singleVoterData);\n            });\n            const voterList = await contract.getVoterLength();\n            // console.log(voterList.toNumber());\n            vlen = voterList.toNumber();\n            // console.log(vlen);\n            setVoterLength(vlen);\n            // setVoterLength(voterList.toNumber());\n            console.log(voterLength);\n        } catch (error) {\n            SetError(\"Something went wrong in fetching voter\");\n        }\n    };\n    const setCandidate = async (candidateForm, fileURL, router)=>{\n        try {\n            const { name , address , age  } = candidateForm;\n            if (!name || !address || !age) {\n                SetError(\"Input data is missing\");\n            }\n            console.log(name, address, age, fileURL);\n            const web3modal = new (web3modal__WEBPACK_IMPORTED_MODULE_2___default())();\n            const connection = await web3modal.connect();\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.providers.Web3Provider(connection);\n            const signer = provider.getSigner();\n            const contract = fetchContract(signer);\n            const data = {\n                name,\n                address,\n                age,\n                image: fileURL\n            };\n            const pinataUrl = await (0,_pinata__WEBPACK_IMPORTED_MODULE_5__.uploadJSONToIPFS)(data);\n            const ipfsUrl = (0,_utils__WEBPACK_IMPORTED_MODULE_6__.GetIpfsUrlFromPinata)(pinataUrl.pinataURL);\n            const candidate = await contract.setCandidate(address, age, name, fileURL, ipfsUrl);\n            await candidate.wait();\n            // verifyFace(fileURL, 0.7);\n            console.log(candidate);\n            router.push(\"/\");\n        } catch (error) {\n            console.log(error);\n        }\n    };\n    const getNewCandidate = async ()=>{\n        try {\n            const web3modal = new (web3modal__WEBPACK_IMPORTED_MODULE_2___default())();\n            const connection = await web3modal.connect();\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.providers.Web3Provider(connection);\n            const signer = provider.getSigner();\n            const contract = fetchContract(signer);\n            console.log(contract);\n            try {\n                console.log(await contract.getCandidates());\n            } catch (error) {\n                console.log(error);\n            }\n            const allCandidates = await contract.getCandidates();\n            // console.log(allCandidates);\n            allCandidates.map(async (ele)=>{\n                const singleCandidate = await contract.getCandidateData(ele);\n                pushCandidate.push(singleCandidate);\n                candidateIndex.push(singleCandidate[2].toNumber());\n            });\n            console.log(pushCandidate);\n            const allCandidatesLength = await contract.getCandidateLength();\n            clen = allCandidatesLength.toNumber();\n            setCandidateLength(clen);\n        } catch (error) {\n            SetError(\"Something went wrong in fetching candidate\");\n        }\n    };\n    // useEffect(() => {\n    //   getNewCandidate();\n    // }, []);\n    //upload to ipfs voter image\n    const giveVote = async (id)=>{\n        try {\n            const candidateAddress = id.address;\n            const candidateId = id.id;\n            const web3modal = new (web3modal__WEBPACK_IMPORTED_MODULE_2___default())();\n            const connection = await web3modal.connect();\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.providers.Web3Provider(connection);\n            const signer = provider.getSigner();\n            const contract = fetchContract(signer);\n            const voteredList = await contract.vote(candidateAddress, candidateId);\n            console.log(voteredList);\n        } catch (error) {\n            console.log(error);\n            SetError(\"Error in giving vote\");\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(VotingContext.Provider, {\n        value: {\n            votingTitle,\n            checkIfWalletIsConnected,\n            connectWallet,\n            createVoter,\n            getAllVoterData,\n            giveVote,\n            setCandidate,\n            getNewCandidate,\n            error,\n            voterArray,\n            voterLength,\n            voterAddress,\n            currentAccount,\n            candidateLength,\n            candidateArray\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\Shrutayu Aggarwal\\\\VotingDapp\\\\context\\\\Voters.js\",\n        lineNumber: 293,\n        columnNumber: 5\n    }, undefined);\n};\n_s(VotingProvider, \"LRZMAFn7aueKjWKwSRbhhW9i99M=\", false, function() {\n    return [\n        next_router__WEBPACK_IMPORTED_MODULE_3__.useRouter\n    ];\n});\n_c = VotingProvider;\nvar _c;\n$RefreshReg$(_c, \"VotingProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./context/Voters.js\n"));

/***/ })

});